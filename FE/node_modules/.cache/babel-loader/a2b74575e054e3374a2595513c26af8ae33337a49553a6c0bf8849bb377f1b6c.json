{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nconst mapStore = \"mapStore\";\nexport default {\n  name: \"OfficeMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean\n  },\n  data() {\n    return {\n      map: null,\n      markers: []\n    };\n  },\n  computed: {\n    ...mapState(mapStore, [\"officetels\", \"sidos\"])\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n  methods: {\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n      document.head.appendChild(script);\n    },\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n    },\n    // 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition\n      });\n      marker.setMap(this.map);\n    },\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            const latitude = result[0].y; // 위도\n            const longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({\n              lat: latitude,\n              lng: longitude\n            });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      // 기존의 마커들을 모두 삭제\n      this.markers.forEach(marker => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n      let addr = \"\";\n\n      // 새로운 마커들 추가\n      for (const offi of this.officetels) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(offi.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n        addr = sidoname + \" \" + offi.법정동 + \" \" + offi.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map,\n            // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng)\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    }\n  },\n  watch: {\n    addr() {\n      // console.log(\"convert?\");\n      if (this.flag) {\n        console.log(\"true?\", this.flag);\n        this.moveCenter(this.addr);\n      } else {\n        console.log(\"false?\", this.flag);\n        this.moveCenterOnly(this.addr);\n      }\n    },\n    officetels() {\n      this.drawMarkers();\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapStore","name","components","props","addr","String","flag","Boolean","data","map","markers","computed","created","mounted","window","kakao","maps","loadMap","loadScript","methods","script","document","createElement","src","onload","load","head","appendChild","lat","lng","container","getElementById","options","center","LatLng","level","Map","loadMaker","markerPosition","marker","Marker","position","setMap","convertLatLng","address","Promise","resolve","reject","geocoder","services","Geocoder","console","log","addressSearch","result","status","Status","OK","latitude","y","longitude","x","error","moveCenter","setCenter","moveCenterOnly","drawMarkers","forEach","offi","officetels","sidoname","i","지역코드","substr","sidos","value","text","법정동","지번","latlng","push","length","firstMarker","getPosition","watch"],"sources":["src/components/omap/OfficeMap.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nconst mapStore = \"mapStore\";\n\nexport default {\n  name: \"OfficeMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean,\n  },\n  data() {\n    return {\n      map: null,\n      markers: [],\n    };\n  },\n  computed: {\n    ...mapState(mapStore, [\"officetels\", \"sidos\"]),\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n  methods: {\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src =\n        \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n      document.head.appendChild(script);\n    },\n\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5,\n      };\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n    },\n    // 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition,\n      });\n      marker.setMap(this.map);\n    },\n\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            const latitude = result[0].y; // 위도\n            const longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({ lat: latitude, lng: longitude });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      // 기존의 마커들을 모두 삭제\n      this.markers.forEach((marker) => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n      let addr = \"\";\n\n      // 새로운 마커들 추가\n      for (const offi of this.officetels) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(offi.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n\n        addr = sidoname + \" \" + offi.법정동 + \" \" + offi.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map, // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng),\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    },\n  },\n  watch: {\n    addr() {\n      // console.log(\"convert?\");\n      if (this.flag) {\n        console.log(\"true?\", this.flag);\n        this.moveCenter(this.addr);\n      } else {\n        console.log(\"false?\", this.flag);\n        this.moveCenterOnly(this.addr);\n      }\n    },\n    officetels() {\n      this.drawMarkers();\n    },\n  },\n};\n</script>\n<style scoped></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}