{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from \"vuex\";\nconst mapStore = \"mapStore\";\nvar addr = \"\";\nexport default {\n  name: \"HouseMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean\n  },\n  data() {\n    return {\n      map: null,\n      markers: []\n      //infowindow: null,\n    };\n  },\n\n  computed: {\n    ...mapState(mapStore, [\"houses\", \"sidos\", \"house\", \"keyword\"])\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n  methods: {\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n      document.head.appendChild(script);\n    },\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      //지도 생성\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n      // 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\n      //var infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n    },\n\n    /////////////마커 여러개/////////////////\n\n    // 지정한 위치에 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition\n      });\n      marker.setMap(this.map);\n    },\n    // 장소 좌표 변경\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        // console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            const latitude = result[0].y; // 위도\n            const longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({\n              lat: latitude,\n              lng: longitude\n            });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      // 기존의 마커들을 모두 삭제\n      this.markers.forEach(marker => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n\n      // 새로운 마커들 추가\n      for (const hs of this.houses) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(hs.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n        addr = sidoname + \" \" + hs.법정동 + \" \" + hs.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map,\n            // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng)\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    },\n    placesSearchCB(data, status) {\n      if (status === window.kakao.maps.services.Status.OK) {\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new window.kakao.maps.LatLngBounds();\n        for (var i = 0; i < data.length; i++) {\n          this.displayMarker(data[i]);\n          bounds.extend(new window.kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        // this.map.setBounds(bounds);\n      }\n    },\n\n    // 지도에 마커를 표시하는 함수입니다\n    displayMarker(place) {\n      // 마커를 생성하고 지도에 표시합니다\n      var marker = new window.kakao.maps.Marker({\n        map: this.map,\n        position: new window.kakao.maps.LatLng(place.y, place.x)\n      });\n\n      // 마커에 클릭이벤트를 등록합니다\n      new window.kakao.maps.event.addListener(marker, \"click\", function () {\n        console.log(\"여기\", place.place_name);\n        //마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\n        // this.infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n\n        // infowindow.setContent(\n        //   '<div style=\"padding:5px;font-size:12px;\">' + place.place_name + \"</div>\"\n        // );\n        // infowindow.open(this.map, marker);\n      });\n    }\n  },\n\n  watch: {\n    houses() {\n      this.drawMarkers();\n    },\n    addr() {\n      // console.log(\"convert?\");\n      if (this.flag) {\n        console.log(\"true?\", this.flag);\n        this.moveCenter(this.addr);\n      } else {\n        console.log(\"false?\", this.flag);\n        this.moveCenterOnly(this.addr);\n      }\n    },\n    async keyword() {\n      console.log(\"바뀌었다: \", this.keyword);\n      try {\n        const center = await this.convertLatLng(addr);\n        this.loadMap(center.lat, center.lng);\n        var ps = new window.kakao.maps.services.Places();\n        ps.keywordSearch(this.keyword, this.placesSearchCB);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapStore","addr","name","components","props","String","flag","Boolean","data","map","markers","computed","created","mounted","window","kakao","maps","loadMap","loadScript","methods","script","document","createElement","src","onload","load","head","appendChild","lat","lng","container","getElementById","options","center","LatLng","level","Map","loadMaker","markerPosition","marker","Marker","position","setMap","convertLatLng","address","Promise","resolve","reject","geocoder","services","Geocoder","addressSearch","result","status","Status","OK","latitude","y","longitude","x","console","error","moveCenter","setCenter","moveCenterOnly","drawMarkers","forEach","hs","houses","sidoname","i","지역코드","substr","sidos","value","text","법정동","지번","latlng","push","length","firstMarker","getPosition","placesSearchCB","bounds","LatLngBounds","displayMarker","extend","place","event","addListener","log","place_name","watch","keyword","ps","Places","keywordSearch"],"sources":["src/components/map/HouseMap.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nconst mapStore = \"mapStore\";\nvar addr = \"\";\nexport default {\n  name: \"HouseMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean,\n  },\n  data() {\n    return {\n      map: null,\n      markers: [],\n      //infowindow: null,\n    };\n  },\n  computed: {\n    ...mapState(mapStore, [\"houses\", \"sidos\", \"house\", \"keyword\"]),\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n\n  methods: {\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src =\n        \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n\n      document.head.appendChild(script);\n    },\n\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5,\n      };\n      //지도 생성\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n      // 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\n      //var infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n    },\n\n    /////////////마커 여러개/////////////////\n\n    // 지정한 위치에 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition,\n      });\n      marker.setMap(this.map);\n    },\n    // 장소 좌표 변경\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        // console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            const latitude = result[0].y; // 위도\n            const longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({ lat: latitude, lng: longitude });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      // 기존의 마커들을 모두 삭제\n      this.markers.forEach((marker) => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n\n      // 새로운 마커들 추가\n      for (const hs of this.houses) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(hs.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n\n        addr = sidoname + \" \" + hs.법정동 + \" \" + hs.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map, // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng),\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    },\n\n    placesSearchCB(data, status) {\n      if (status === window.kakao.maps.services.Status.OK) {\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new window.kakao.maps.LatLngBounds();\n\n        for (var i = 0; i < data.length; i++) {\n          this.displayMarker(data[i]);\n          bounds.extend(new window.kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        // this.map.setBounds(bounds);\n      }\n    },\n    // 지도에 마커를 표시하는 함수입니다\n    displayMarker(place) {\n      // 마커를 생성하고 지도에 표시합니다\n      var marker = new window.kakao.maps.Marker({\n        map: this.map,\n        position: new window.kakao.maps.LatLng(place.y, place.x),\n      });\n\n      // 마커에 클릭이벤트를 등록합니다\n      new window.kakao.maps.event.addListener(marker, \"click\", function () {\n        console.log(\"여기\", place.place_name);\n        //마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\n        // this.infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n\n        // infowindow.setContent(\n        //   '<div style=\"padding:5px;font-size:12px;\">' + place.place_name + \"</div>\"\n        // );\n        // infowindow.open(this.map, marker);\n      });\n    },\n  },\n\n  watch: {\n    houses() {\n      this.drawMarkers();\n    },\n    addr() {\n      // console.log(\"convert?\");\n      if (this.flag) {\n        console.log(\"true?\", this.flag);\n        this.moveCenter(this.addr);\n      } else {\n        console.log(\"false?\", this.flag);\n        this.moveCenterOnly(this.addr);\n      }\n    },\n    async keyword() {\n      console.log(\"바뀌었다: \", this.keyword);\n      try {\n        const center = await this.convertLatLng(addr);\n\n        this.loadMap(center.lat, center.lng);\n\n        var ps = new window.kakao.maps.services.Places();\n        ps.keywordSearch(this.keyword, this.placesSearchCB);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}