{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions } from \"vuex\";\n// import axios from \"axios\";\nconst mapStore = \"mapStore\";\nvar addr = \"\";\nvar image = \"https://cdn.icon-icons.com/icons2/317/PNG/512/map-marker-icon_34392.png\";\nlet univImg = require(\"@/assets/univIconImg.png\");\nexport default {\n  name: \"HouseMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean\n  },\n  data() {\n    return {\n      map: null,\n      markers: [],\n      aroundMarkers: [],\n      apiKey: \"HjArpPfDKp73BQACFKjAJ8j0iR6W0r2B4JbruiI2\"\n      //infowindow: null,\n    };\n  },\n\n  computed: {\n    ...mapState(mapStore, [\"houses\", \"sidos\", \"house\", \"keyword\", \"selectSido\", \"houseLatLng\", \"univs\"])\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      //this.loadMap(37.8675428, 127.7408718); 강원대아웃!!\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n  methods: {\n    ...mapActions(mapStore, [\"setHouseLatLng\"]),\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n      document.head.appendChild(script);\n    },\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5\n      };\n      //지도 생성\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n      // 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\n      //var infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n    },\n\n    /////////////마커 여러개/////////////////\n\n    // 지정한 위치에 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition\n      });\n      this.markers.push(marker);\n      marker.setMap(this.map);\n    },\n    // 장소 좌표 변경\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        // console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            var latitude = result[0].y; // 위도\n            var longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({\n              lat: latitude,\n              lng: longitude\n            });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // 마커들 제거\n    clearMarkers() {\n      this.markers.forEach(marker => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n      this.aroundMarkers.forEach(aroundM => {\n        aroundM.setMap(null);\n      });\n      this.aroundMarkers = [];\n    },\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      this.clearMarkers();\n\n      // 새로운 마커들 추가\n      for (const hs of this.houses) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(hs.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n        addr = sidoname + \" \" + hs.법정동 + \" \" + hs.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map,\n            // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng)\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    },\n    drawUnivMarkers() {\n      this.aroundMarkers.forEach(aroundM => {\n        aroundM.setMap(null);\n      });\n      this.aroundMarkers = [];\n      var imageSize = new window.kakao.maps.Size(50, 50);\n      var imageOptions = {};\n      var markerImage = this.createMarkerImage(univImg, imageSize, imageOptions);\n      this.univs.forEach(univ => {\n        const marker = new window.kakao.maps.Marker({\n          map: this.map,\n          // 마커를 표시할 지도\n          position: new window.kakao.maps.LatLng(univ.lat, univ.lng),\n          image: markerImage\n        });\n        this.getTrafficInfo(univ.lat, univ.lng);\n        let content = this.univCustomOverlay();\n        // 인포 윈도우\n        var infowindow = new window.kakao.maps.InfoWindow({\n          content: content,\n          position: marker.getPosition(),\n          removable: true\n        });\n        var self = this;\n\n        // 클릭 이벤트 추가\n        window.kakao.maps.event.addListener(marker, \"click\", () => {\n          infowindow.open(self.map, marker);\n        });\n        this.aroundMarkers.push(marker);\n      });\n    },\n    placesSearchCB(data, status) {\n      if (status === window.kakao.maps.services.Status.OK) {\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new window.kakao.maps.LatLngBounds();\n        for (var i = 0; i < data.length; i++) {\n          this.displayMarker(data[i]);\n          bounds.extend(new window.kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다 (집 위치 기준이여서 필요없음)\n        // this.map.setBounds(bounds);\n      }\n    },\n\n    createMarkerImage(src, size, options) {\n      var markerImage = new window.kakao.maps.MarkerImage(src, size, options);\n      return markerImage;\n    },\n    // 지도에 마커를 표시하는 함수입니다\n    displayMarker(place) {\n      // 마커를 생성하고 지도에 표시합니다\n      var imageSize = new window.kakao.maps.Size(30, 30);\n      var imageOptions = {};\n\n      // 마커이미지와 마커를 생성합니다\n      var markerImage = this.createMarkerImage(image, imageSize, imageOptions);\n      var marker = new window.kakao.maps.Marker({\n        map: this.map,\n        position: new window.kakao.maps.LatLng(place.y, place.x),\n        image: markerImage\n      });\n      this.aroundMarkers.push(marker);\n\n      // 마커를 지도에 표시\n      marker.setMap(this.map);\n      var infowindow = new window.kakao.maps.InfoWindow({\n        content: \"\",\n        position: new window.kakao.maps.LatLng(place.y, place.x),\n        removable: true\n      });\n      var self = this;\n\n      //window.kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(this.map, marker, infowindow));\n      window.kakao.maps.event.addListener(marker, \"mouseout\", function () {\n        infowindow.close();\n      });\n\n      // 마커에 클릭이벤트를 등록합니다\n      window.kakao.maps.event.addListener(marker, \"mouseover\", async function () {\n        console.log(\"여기\", place.place_name);\n        var start = await self.convertLatLng(self.house.dong + \" \" + self.house.jibun);\n        //var end = await self.convertLatLng(self.house.dong + \" \" +  +\" \"+ place.place_name);\n\n        var EARTH_RADIUS = 6371;\n        var radLat1 = start.lat * Math.PI / 180; // 라디안으로 변환\n        var radLon1 = start.lng * Math.PI / 180; // 라디안으로 변환\n\n        var radLat2 = place.y * Math.PI / 180; // 라디안으로 변환\n        var radLon2 = place.x * Math.PI / 180; // 라디안으로 변환\n\n        // 두 지점의 위도 및 경도 차이 계산\n        var deltaLat = radLat2 - radLat1;\n        var deltaLon = radLon2 - radLon1;\n\n        // Haversine 공식을 사용하여 거리 계산\n        var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        var distance = Math.round(EARTH_RADIUS * c * 1000) * 1.5;\n        var walkkTime = distance / 67 | 0;\n        var walkHour = \"\",\n          walkMin = \"\";\n\n        // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다\n        if (walkkTime > 60) {\n          walkHour = '<span class=\"number\">' + Math.floor(walkkTime / 60) + \"</span>시간 \";\n        }\n        walkMin = '<span class=\"number\">' + walkkTime % 60 + \"</span>분\";\n\n        // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다\n        var bycicleTime = distance / 227 | 0;\n        var bycicleHour = \"\",\n          bycicleMin = \"\";\n\n        // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다\n        if (bycicleTime > 60) {\n          bycicleHour = '<span class=\"number\">' + Math.floor(bycicleTime / 60) + \"</span>시간 \";\n        }\n        bycicleMin = '<span class=\"number\">' + bycicleTime % 60 + \"</span>분\";\n        if (distance >= 1000) {\n          distance = Math.round(distance / 1000);\n        }\n\n        //var start = house. jibun\n        //var end = place.place_name\n\n        //var distance = keyword + place.place_name;\n        console.log(\"자전거 :\", distance);\n        console.log(\"자전거 :\", walkkTime, walkHour, walkMin);\n        infowindow.setContent('<div class=\"pr-2 pl-2 pt-3\" style=\"height:130px\">' + place.place_name + \"<br/>\" + '        <span class=\"label\">총거리</span><span class=\"number\">' + distance + \" m\" + '        <br/> <span class=\"label\">도보</span> ' + walkHour + walkMin + '       <br/>  <span class=\"label\">자전거</span>' + bycicleHour + bycicleMin + \"       <br/> \" + \"</div>\");\n        //console.log(infowindow.content);\n        infowindow.open(self.map, marker);\n      });\n    },\n    //교통정보\n    //   getTrafficInfo(lat, lng) {\n    //     const options = {\n    //       method: \"POST\",\n    //       url: \"https://apis.openapi.sk.com/transit/routes/sub\",\n    //       headers: {\n    //         accept: \"application/json\",\n    //         \"content-type\": \"application/json\",\n    //         appKey: \"e8wHh2tya84M88aReEpXCa5XTQf3xgo01aZG39k5\",\n    //       },\n    //       data: {\n    //         startX: this.houseLatLng.lng,\n    //         startY: this.houseLatLng.lat,\n    //         endX: lng,\n    //         endY: lat,\n    //         lang: 0,\n    //         format: \"json\",\n    //         count: 1,\n    //         searchDttm: \"202301011200\",\n    //       },\n    //     };\n\n    //     axios\n    //       .request(options)\n    //       .then((response) => {\n    //         this.trafficInfo = response.data.metaData.plan.itineraries[0];\n    //         console.log(this.trafficInfo);\n\n    //         this.totalFare = this.trafficInfo.fare.regular.totalFare;\n    //         this.totalDistance = this.trafficInfo.fare.totalDistance;\n    //         this.totalTime = this.trafficInfo.fare.totalTime;\n    //         this.totalWalkDistance = this.trafficInfo.fare.totalWalkDistance;\n    //         this.transferCount = this.trafficInfo.fare.transferCount;\n    //       })\n    //       .catch((error) => {\n    //         console.error(error);\n    //       });\n    //   },\n    // },\n\n    watch: {\n      houses() {\n        this.drawMarkers();\n      },\n      async house() {\n        let sidoname = \"\";\n        for (let i = 0; i < 18; i++) {\n          if (String(this.selectSido) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n        let latlng = await this.convertLatLng(sidoname + \" \" + this.house.dong + \" \" + this.house.jibun);\n        console.log(\"Map house watch\", latlng);\n        this.setHouseLatLng(latlng);\n      },\n      addr() {\n        // console.log(\"convert?\");\n        if (this.flag) {\n          console.log(\"true?\", this.flag);\n          this.moveCenter(this.addr);\n        } else {\n          console.log(\"false?\", this.flag);\n          this.moveCenterOnly(this.addr);\n        }\n      },\n      async keyword() {\n        console.log(\"바뀌었다: \", this.keyword);\n        try {\n          const center = await this.convertLatLng(this.addr);\n          var x = center.lat;\n          var y = center.lng;\n          this.loadMap(x, y);\n          var ps = new window.kakao.maps.services.Places();\n          ps.keywordSearch(this.keyword, this.placesSearchCB, {\n            radius: 1000,\n            location: new window.kakao.maps.LatLng(x, y)\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      },\n      univs() {\n        console.log(\"대학교 조회 바뀜\");\n        this.drawUnivMarkers();\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","mapStore","addr","image","univImg","require","name","components","props","String","flag","Boolean","data","map","markers","aroundMarkers","apiKey","computed","created","mounted","window","kakao","maps","loadMap","loadScript","methods","script","document","createElement","src","onload","load","head","appendChild","lat","lng","container","getElementById","options","center","LatLng","level","Map","loadMaker","markerPosition","marker","Marker","position","push","setMap","convertLatLng","address","Promise","resolve","reject","geocoder","services","Geocoder","addressSearch","result","status","Status","OK","latitude","y","longitude","x","console","error","moveCenter","setCenter","moveCenterOnly","clearMarkers","forEach","aroundM","drawMarkers","hs","houses","sidoname","i","지역코드","substr","sidos","value","text","법정동","지번","latlng","length","firstMarker","getPosition","drawUnivMarkers","imageSize","Size","imageOptions","markerImage","createMarkerImage","univs","univ","getTrafficInfo","content","univCustomOverlay","infowindow","InfoWindow","removable","self","event","addListener","open","placesSearchCB","bounds","LatLngBounds","displayMarker","extend","size","MarkerImage","place","close","log","place_name","start","house","dong","jibun","EARTH_RADIUS","radLat1","Math","PI","radLon1","radLat2","radLon2","deltaLat","deltaLon","a","pow","sin","cos","c","atan2","sqrt","distance","round","walkkTime","walkHour","walkMin","floor","bycicleTime","bycicleHour","bycicleMin","setContent","watch","selectSido","setHouseLatLng","keyword","ps","Places","keywordSearch","radius","location"],"sources":["src/components/map/HouseMap.vue"],"sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport { mapState, mapActions } from \"vuex\";\n// import axios from \"axios\";\nconst mapStore = \"mapStore\";\nvar addr = \"\";\nvar image = \"https://cdn.icon-icons.com/icons2/317/PNG/512/map-marker-icon_34392.png\";\nlet univImg = require(\"@/assets/univIconImg.png\");\nexport default {\n  name: \"HouseMap\",\n  components: {},\n  props: {\n    addr: String,\n    flag: Boolean,\n  },\n  data() {\n    return {\n      map: null,\n      markers: [],\n      aroundMarkers: [],\n      apiKey: \"HjArpPfDKp73BQACFKjAJ8j0iR6W0r2B4JbruiI2\",\n      //infowindow: null,\n    };\n  },\n  computed: {\n    ...mapState(mapStore, [\n      \"houses\",\n      \"sidos\",\n      \"house\",\n      \"keyword\",\n      \"selectSido\",\n      \"houseLatLng\",\n      \"univs\",\n    ]),\n  },\n  created() {},\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      //this.loadMap(37.8675428, 127.7408718); 강원대아웃!!\n      this.loadMap(37.5642135, 127.0016985);\n    } else {\n      this.loadScript();\n    }\n  },\n\n  methods: {\n    ...mapActions(mapStore, [\"setHouseLatLng\"]),\n\n    // api 불러오기\n    loadScript() {\n      const script = document.createElement(\"script\");\n      script.src =\n        \"//dapi.kakao.com/v2/maps/sdk.js?appkey=2c45a57d65518ab4eebc76e4b1a15772&autoload=false&libraries=services\";\n      script.onload = () => window.kakao.maps.load(() => this.loadMap(37.5642135, 127.0016985));\n\n      document.head.appendChild(script);\n    },\n\n    // 맵 출력하기\n    loadMap(lat, lng) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new window.kakao.maps.LatLng(lat, lng),\n        level: 5,\n      };\n      //지도 생성\n      this.map = new window.kakao.maps.Map(container, options);\n      this.loadMaker(lat, lng);\n      // 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\n      //var infowindow = new window.kakao.maps.InfoWindow({ zIndex: 1 });\n    },\n\n    /////////////마커 여러개/////////////////\n\n    // 지정한 위치에 마커 불러오기\n    loadMaker(lat, lng) {\n      const markerPosition = new window.kakao.maps.LatLng(lat, lng);\n      const marker = new window.kakao.maps.Marker({\n        position: markerPosition,\n      });\n      this.markers.push(marker);\n      marker.setMap(this.map);\n    },\n    // 장소 좌표 변경\n    // 장소 좌표로 변경\n    convertLatLng(address) {\n      return new Promise((resolve, reject) => {\n        // 주소-좌표 변환 객체 생성\n        const geocoder = new window.kakao.maps.services.Geocoder();\n        // console.log(\"convertLatLng에 전달된 addr\", address);\n\n        // 주소로 좌표 변환 요청\n        geocoder.addressSearch(address, (result, status) => {\n          if (status === window.kakao.maps.services.Status.OK) {\n            // 좌표 변환 성공\n            var latitude = result[0].y; // 위도\n            var longitude = result[0].x; // 경도\n            // console.log(\"lat\", latitude, \" lng\", longitude);\n\n            resolve({ lat: latitude, lng: longitude });\n          } else {\n            // 좌표 변환 실패 또는 유효하지 않은 주소\n            console.error(\"Failed to convert address to coordinates:\", status);\n            reject(status);\n          }\n        });\n      });\n    },\n    // 중심좌표로 움직이는 메서드\n    async moveCenter(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n        const position = new window.kakao.maps.LatLng(center.lat, center.lng);\n        this.map.setCenter(position);\n        // console.log(center);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async moveCenterOnly(addr) {\n      try {\n        const center = await this.convertLatLng(addr);\n\n        this.loadMap(center.lat, center.lng);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    // 마커들 제거\n    clearMarkers() {\n      this.markers.forEach((marker) => {\n        marker.setMap(null);\n      });\n      this.markers = [];\n      this.aroundMarkers.forEach((aroundM) => {\n        aroundM.setMap(null);\n      });\n      this.aroundMarkers = [];\n    },\n\n    // 매물들을 마커로 표시하기\n    async drawMarkers() {\n      this.clearMarkers();\n\n      // 새로운 마커들 추가\n      for (const hs of this.houses) {\n        let sidoname = \"\";\n        // 지역 코드 찾는 for문\n        for (let i = 0; i < 18; i++) {\n          if (String(hs.지역코드).substr(0, 2) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n\n        addr = sidoname + \" \" + hs.법정동 + \" \" + hs.지번;\n        try {\n          const latlng = await this.convertLatLng(addr);\n          const marker = new window.kakao.maps.Marker({\n            map: this.map, // 마커를 표시할 지도\n            position: new window.kakao.maps.LatLng(latlng.lat, latlng.lng),\n          });\n          this.markers.push(marker);\n        } catch (error) {\n          console.error(\"Failed to add marker:\", error);\n        }\n      }\n\n      if (this.markers.length > 0) {\n        const firstMarker = this.markers[0];\n        const position = firstMarker.getPosition();\n        this.map.setCenter(position);\n      }\n    },\n\n    drawUnivMarkers() {\n      this.aroundMarkers.forEach((aroundM) => {\n        aroundM.setMap(null);\n      });\n      this.aroundMarkers = [];\n\n      var imageSize = new window.kakao.maps.Size(50, 50);\n      var imageOptions = {};\n      var markerImage = this.createMarkerImage(univImg, imageSize, imageOptions);\n\n      this.univs.forEach((univ) => {\n        const marker = new window.kakao.maps.Marker({\n          map: this.map, // 마커를 표시할 지도\n          position: new window.kakao.maps.LatLng(univ.lat, univ.lng),\n          image: markerImage,\n        });\n\n        this.getTrafficInfo(univ.lat, univ.lng);\n        let content = this.univCustomOverlay();\n        // 인포 윈도우\n        var infowindow = new window.kakao.maps.InfoWindow({\n          content: content,\n          position: marker.getPosition(),\n          removable: true,\n        });\n        var self = this;\n\n        // 클릭 이벤트 추가\n        window.kakao.maps.event.addListener(marker, \"click\", () => {\n          infowindow.open(self.map, marker);\n        });\n\n        this.aroundMarkers.push(marker);\n      });\n    },\n\n    placesSearchCB(data, status) {\n      if (status === window.kakao.maps.services.Status.OK) {\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n        var bounds = new window.kakao.maps.LatLngBounds();\n\n        for (var i = 0; i < data.length; i++) {\n          this.displayMarker(data[i]);\n          bounds.extend(new window.kakao.maps.LatLng(data[i].y, data[i].x));\n        }\n\n        // // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다 (집 위치 기준이여서 필요없음)\n        // this.map.setBounds(bounds);\n      }\n    },\n    createMarkerImage(src, size, options) {\n      var markerImage = new window.kakao.maps.MarkerImage(src, size, options);\n      return markerImage;\n    },\n\n    // 지도에 마커를 표시하는 함수입니다\n    displayMarker(place) {\n      // 마커를 생성하고 지도에 표시합니다\n      var imageSize = new window.kakao.maps.Size(30, 30);\n      var imageOptions = {};\n\n      // 마커이미지와 마커를 생성합니다\n      var markerImage = this.createMarkerImage(image, imageSize, imageOptions);\n\n      var marker = new window.kakao.maps.Marker({\n        map: this.map,\n        position: new window.kakao.maps.LatLng(place.y, place.x),\n        image: markerImage,\n      });\n\n      this.aroundMarkers.push(marker);\n\n      // 마커를 지도에 표시\n      marker.setMap(this.map);\n\n      var infowindow = new window.kakao.maps.InfoWindow({\n        content: \"\",\n        position: new window.kakao.maps.LatLng(place.y, place.x),\n        removable: true,\n      });\n      var self = this;\n\n      //window.kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(this.map, marker, infowindow));\n      window.kakao.maps.event.addListener(marker, \"mouseout\", function () {\n        infowindow.close();\n      });\n\n      // 마커에 클릭이벤트를 등록합니다\n      window.kakao.maps.event.addListener(marker, \"mouseover\", async function () {\n        console.log(\"여기\", place.place_name);\n\n        var start = await self.convertLatLng(self.house.dong + \" \" + self.house.jibun);\n        //var end = await self.convertLatLng(self.house.dong + \" \" +  +\" \"+ place.place_name);\n\n        var EARTH_RADIUS = 6371;\n        var radLat1 = (start.lat * Math.PI) / 180; // 라디안으로 변환\n        var radLon1 = (start.lng * Math.PI) / 180; // 라디안으로 변환\n\n        var radLat2 = (place.y * Math.PI) / 180; // 라디안으로 변환\n        var radLon2 = (place.x * Math.PI) / 180; // 라디안으로 변환\n\n        // 두 지점의 위도 및 경도 차이 계산\n        var deltaLat = radLat2 - radLat1;\n        var deltaLon = radLon2 - radLon1;\n\n        // Haversine 공식을 사용하여 거리 계산\n        var a =\n          Math.pow(Math.sin(deltaLat / 2), 2) +\n          Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n        var distance = Math.round(EARTH_RADIUS * c * 1000) * 1.5;\n\n        var walkkTime = (distance / 67) | 0;\n        var walkHour = \"\",\n          walkMin = \"\";\n\n        // 계산한 도보 시간이 60분 보다 크면 시간으로 표시합니다\n        if (walkkTime > 60) {\n          walkHour = '<span class=\"number\">' + Math.floor(walkkTime / 60) + \"</span>시간 \";\n        }\n        walkMin = '<span class=\"number\">' + (walkkTime % 60) + \"</span>분\";\n\n        // 자전거의 평균 시속은 16km/h 이고 이것을 기준으로 자전거의 분속은 267m/min입니다\n        var bycicleTime = (distance / 227) | 0;\n        var bycicleHour = \"\",\n          bycicleMin = \"\";\n\n        // 계산한 자전거 시간이 60분 보다 크면 시간으로 표출합니다\n        if (bycicleTime > 60) {\n          bycicleHour = '<span class=\"number\">' + Math.floor(bycicleTime / 60) + \"</span>시간 \";\n        }\n        bycicleMin = '<span class=\"number\">' + (bycicleTime % 60) + \"</span>분\";\n        if (distance >= 1000) {\n          distance = Math.round(distance / 1000);\n        }\n\n        //var start = house. jibun\n        //var end = place.place_name\n\n        //var distance = keyword + place.place_name;\n        console.log(\"자전거 :\", distance);\n        console.log(\"자전거 :\", walkkTime, walkHour, walkMin);\n\n        infowindow.setContent(\n          '<div class=\"pr-2 pl-2 pt-3\" style=\"height:130px\">' +\n            place.place_name +\n            \"<br/>\" +\n            '        <span class=\"label\">총거리</span><span class=\"number\">' +\n            distance +\n            \" m\" +\n            '        <br/> <span class=\"label\">도보</span> ' +\n            walkHour +\n            walkMin +\n            '       <br/>  <span class=\"label\">자전거</span>' +\n            bycicleHour +\n            bycicleMin +\n            \"       <br/> \" +\n            \"</div>\"\n        );\n        //console.log(infowindow.content);\n        infowindow.open(self.map, marker);\n      });\n    },\n\n    //교통정보\n    //   getTrafficInfo(lat, lng) {\n    //     const options = {\n    //       method: \"POST\",\n    //       url: \"https://apis.openapi.sk.com/transit/routes/sub\",\n    //       headers: {\n    //         accept: \"application/json\",\n    //         \"content-type\": \"application/json\",\n    //         appKey: \"e8wHh2tya84M88aReEpXCa5XTQf3xgo01aZG39k5\",\n    //       },\n    //       data: {\n    //         startX: this.houseLatLng.lng,\n    //         startY: this.houseLatLng.lat,\n    //         endX: lng,\n    //         endY: lat,\n    //         lang: 0,\n    //         format: \"json\",\n    //         count: 1,\n    //         searchDttm: \"202301011200\",\n    //       },\n    //     };\n\n    //     axios\n    //       .request(options)\n    //       .then((response) => {\n    //         this.trafficInfo = response.data.metaData.plan.itineraries[0];\n    //         console.log(this.trafficInfo);\n\n    //         this.totalFare = this.trafficInfo.fare.regular.totalFare;\n    //         this.totalDistance = this.trafficInfo.fare.totalDistance;\n    //         this.totalTime = this.trafficInfo.fare.totalTime;\n    //         this.totalWalkDistance = this.trafficInfo.fare.totalWalkDistance;\n    //         this.transferCount = this.trafficInfo.fare.transferCount;\n    //       })\n    //       .catch((error) => {\n    //         console.error(error);\n    //       });\n    //   },\n    // },\n\n    watch: {\n      houses() {\n        this.drawMarkers();\n      },\n      async house() {\n        let sidoname = \"\";\n        for (let i = 0; i < 18; i++) {\n          if (String(this.selectSido) == this.sidos[i].value) {\n            sidoname = this.sidos[i].text;\n            break;\n          }\n        }\n\n        let latlng = await this.convertLatLng(\n          sidoname + \" \" + this.house.dong + \" \" + this.house.jibun\n        );\n        console.log(\"Map house watch\", latlng);\n        this.setHouseLatLng(latlng);\n      },\n      addr() {\n        // console.log(\"convert?\");\n        if (this.flag) {\n          console.log(\"true?\", this.flag);\n          this.moveCenter(this.addr);\n        } else {\n          console.log(\"false?\", this.flag);\n          this.moveCenterOnly(this.addr);\n        }\n      },\n      async keyword() {\n        console.log(\"바뀌었다: \", this.keyword);\n        try {\n          const center = await this.convertLatLng(this.addr);\n          var x = center.lat;\n          var y = center.lng;\n          this.loadMap(x, y);\n\n          var ps = new window.kakao.maps.services.Places();\n          ps.keywordSearch(this.keyword, this.placesSearchCB, {\n            radius: 1000,\n            location: new window.kakao.maps.LatLng(x, y),\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      },\n      univs() {\n        console.log(\"대학교 조회 바뀜\");\n        this.drawUnivMarkers();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\ntemplate {\n  margin: 0;\n}\n.container {\n  width: 100vw;\n  height: 80vh;\n}\n.dotOverlay {\n  position: relative;\n  bottom: 10px;\n  border-radius: 6px;\n  border: 1px solid #ccc;\n  border-bottom: 2px solid #ddd;\n  float: left;\n  font-size: 12px;\n  padding: 5px;\n  background: #fff;\n}\n.dotOverlay:nth-of-type(n) {\n  border: 0;\n  box-shadow: 0px 1px 2px #888;\n}\n.number {\n  font-weight: bold;\n  color: #ee6152;\n}\n.dotOverlay:after {\n  content: \"\";\n  position: absolute;\n  margin-left: -6px;\n  left: 50%;\n  bottom: -8px;\n  width: 11px;\n  height: 8px;\n  background: url(\"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white_small.png\");\n}\n.distanceInfo {\n  position: relative;\n  top: 5px;\n  left: 5px;\n  list-style: none;\n  margin: 0;\n}\n.distanceInfo .label {\n  display: inline-block;\n  width: 50px;\n}\n.distanceInfo:after {\n  content: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}